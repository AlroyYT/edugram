%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 6067
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Document Summary) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 756.8506299212598378 Td
(File: summary) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 728.5041732283464171 Td
(Date: 14-05-2025) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 671.8112598425196893 Td
(Advanced Educational Summary 80568f10-e4fc-4cae-af18-7b06d72ba580.pptx Optimizing) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 651.9687401574802834 Td
(Warehouse Robot Paths A Deep Dive into the Traveling Salesperson Problem This) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 632.1262204724408775 Td
(presentation explores the challenge of optimizing paths for warehouse robots, a problem) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 612.2837007874015853 Td
(mathematically analogous to the classic Traveling Salesperson Problem TSP . The goal is) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 592.4411811023621794 Td
(to find the shortest possible route for a robot to visit multiple storage locations within a) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 572.5986614173227736 Td
(warehouse and return to its base, visiting each location exactly once. This optimization is) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 552.7561417322833677 Td
(crucial for minimizing operational costs, saving time, and boosting overall warehouse) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 532.9136220472440755 Td
(productivity. This summary will unpack the problem, explore various algorithmic solutions,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 513.0711023622046696 Td
(and discuss the team s chosen approach. The Traveling Salesperson Problem TSP in the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 493.2285826771653205 Td
(Warehouse The core problem is a variation of the TSP. Imagine a salesperson needing to) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 473.3860629921259147 Td
(visit multiple cities and return home, covering the shortest total distance. Replacing cities) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 453.5435433070865656 Td
(with storage locations and the salesperson s home with the robot s base, we have the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 433.7010236220471597 Td
(warehouse robot s challenge. This seemingly simple problem becomes computationally) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 413.8585039370078107 Td
(complex as the number of locations increases. Algorithmic Approaches to Solving the TSP) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 394.0159842519684616 Td
(Several algorithmic techniques can be employed to tackle the TSP, each with its own) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 374.1734645669290558 Td
(strengths and weaknesses Exact Algorithms These guarantee the optimal solution but can) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 354.3309448818897067 Td
(be computationally expensive for large problems. Dynamic Programming, exemplified by) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 334.4884251968503008 Td
(the Held-Karp algorithm, is an example. Heuristic Algorithms These algorithms provide) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 314.6459055118109518 Td
(good approximations of the optimal solution quickly, sacrificing some accuracy for speed.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 294.8033858267715459 Td
(The Nearest Neighbor heuristic is a prime example. Metaheuristic Algorithms These) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 274.9608661417322537 Td
(advanced techniques aim to improve upon heuristic solutions by iteratively refining the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 255.1183464566928478 Td
(search process. Genetic Algorithms and Ant Colony Optimization fall into this category.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 235.2758267716534419 Td
(Specific TSP Algorithms Several algorithms are specifically designed for the TSP, including) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 215.4333070866141497 Td
(Brute Force Exhaustively checks all possible routes. Computationally infeasible for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 195.5907874015747439 Td
(anything beyond a very small number of locations. Backtracking A recursive approach that) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 175.748267716535338 Td
(explores potential paths and abandons suboptimal branches. Insertion Heuristics These) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 155.9057480314959321 Td
(build a tour incrementally by inserting cities one by one. Examples include Farthest) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 136.0632283464566399 Td
(Insertion and Cheapest Insertion. Algorithm Complexity Analysis The efficiency of an) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 116.220708661417234 Td
(algorithm is often described using Big O notation, which represents how the runtime scales) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 96.3781889763778281 Td
(with the number of locations n Brute Force O n! Factorial time, extremely inefficient for) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 76.5356692913385359 Td
(large n. Dynamic Programming Held-Karp O n 2 Exponential, but better than brute force.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 56.69314960629913 Td
(Greedy Algorithm O n Polynomial time, suitable for real-time applications. Nearest) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 3352
>>
stream
0.5670000000000001 w
0 G
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Neighbor O n Polynomial time, simple and fast. Genetic Algorithms O k n Depends on the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 765.3545669291338527 Td
(number of generations k . Ant Colony Optimization O n m Depends on the number of ants) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 745.5120472440944468 Td
(m . Project Methodology and Technologies The team followed a structured approach 1.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 725.6695275590550409 Td
(Research Shortlisting Investigated various TSP algorithms, analyzed their time complexity,) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 705.8270078740157487 Td
(and shortlisted suitable candidates e.g., Nearest Neighbor, Simulated Annealing, Genetic) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 685.9844881889763428 Td
(Algorithm . 2. Implementation Testing Implemented the selected algorithms using Google) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 666.1419685039369369 Td
(Colab and tested them with varying input sizes, verifying their runtime against theoretical) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 646.2994488188976447 Td
(complexity. 3. Optimization Simulation Refined the top-performing algorithms and) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 626.4569291338582389 Td
(visualized the resulting routes using p5.js and OpenProcessing, evaluating them based on) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 606.614409448818833 Td
(accuracy, speed, and visual clarity. Conclusion and Real-World Implications Efficient path) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 586.7718897637794271 Td
(planning is paramount for warehouse robots to optimize operational efficiency. While the) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 566.9293700787401349 Td
(presentation mentions using the A algorithm in the conclusion, the bulk of the content) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 547.086850393700729 Td
(focuses on TSP algorithms. This discrepancy should be clarified. Regardless of the specific) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 527.2443307086614368 Td
(algorithm chosen, the ability to calculate the shortest path in real-time, even in dynamic) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 507.4018110236219741 Td
(warehouse environments, translates to significant cost savings, faster order fulfillment, and) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 487.559291338582625 Td
(increased productivity in modern supply chains. This optimization problem is a key) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 467.716771653543276 Td
(component in realizing the full potential of automated warehouse systems. --- This) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 447.8742519685038701 Td
(summary was generated automatically and presents key concepts in an educational) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 428.0317322834645211 Td
(format.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R ]
/Count 2
>>
endobj
7 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
8 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
9 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
10 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 7 0 R
/F2 8 0 R
/F3 9 0 R
/F4 10 0 R
/F5 11 0 R
/F6 12 0 R
/F7 13 0 R
/F8 14 0 R
/F9 15 0 R
/F10 16 0 R
/F11 17 0 R
/F12 18 0 R
/F13 19 0 R
/F14 20 0 R
>>
/XObject <<
>>
>>
endobj
21 0 obj
<<
/Producer (jsPDF 3.0.1)
/CreationDate (D:20250514133214+05'30')
>>
endobj
22 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 23
0000000000 65535 f 
0000009812 00000 n 
0000011637 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000006271 00000 n 
0000006408 00000 n 
0000009875 00000 n 
0000010000 00000 n 
0000010130 00000 n 
0000010263 00000 n 
0000010401 00000 n 
0000010525 00000 n 
0000010654 00000 n 
0000010786 00000 n 
0000010922 00000 n 
0000011050 00000 n 
0000011177 00000 n 
0000011306 00000 n 
0000011439 00000 n 
0000011541 00000 n 
0000011887 00000 n 
0000011973 00000 n 
trailer
<<
/Size 23
/Root 22 0 R
/Info 21 0 R
/ID [ <2FFE06EDE741BA1EAB7697D900E19494> <2FFE06EDE741BA1EAB7697D900E19494> ]
>>
startxref
12077
%%EOF