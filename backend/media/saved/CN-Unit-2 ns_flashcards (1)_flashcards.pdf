%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 2078
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Flashcards) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 745.5120472440944468 Td
(File: CN-Unit-2 ns_flashcards \(1\)) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 725.6695275590550409 Td
(Date: 25-04-2025) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 705.8270078740157487 Td
(Total Cards: 10) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
56.6929133858267775 666.1419685039369369 Td
(Card 1/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 626.4569291338582389 Td
(Q: What are the core functions of the Network Layer, and how do they differ from the Data) Tj
T* (Link Layer?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 566.9293700787401349 Td
(A: The Network Layer handles end-to-end packet delivery across multiple network hops,) Tj
T* (manages logical addressing \(IP addresses\), and understands the network topology.  The) Tj
T* (Data Link Layer, on the other hand, focuses on frame delivery between directly connected) Tj
T* (nodes on a single physical link \(MAC addresses\).) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 408.1892125984251152 Td
(Card 2/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 368.5041732283464171 Td
(Q: Compare and contrast connectionless and connection-oriented network services at the) Tj
T* (Network Layer.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 308.9766141732283131 Td
(A: Connectionless \(datagram\) services handle each packet independently, offering) Tj
T* (flexibility but no guaranteed delivery order or QoS. Connection-oriented \(virtual circuit\)) Tj
T* (services establish a dedicated path before data transfer, ensuring ordered delivery and) Tj
T* (consistent performance, but with initial setup overhead and less adaptability.  MPLS is a) Tj
T* (key example of a virtual circuit technology.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 2320
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 3/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: How does Dijkstra's algorithm determine the shortest path in a network?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: Dijkstra's algorithm finds the shortest path by assigning tentative distances \(initially) Tj
T* (infinity\) to all nodes except the source \(distance 0\). It iteratively selects the unvisited node) Tj
T* (with the smallest tentative distance, marks it as permanent, and updates the tentative) Tj
T* (distances of its neighbors. This continues until all reachable nodes are visited.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 547.086850393700729 Td
(Card 4/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 507.4018110236219741 Td
(Q: Explain the 'count-to-infinity' problem and how link state routing mitigates it.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 467.716771653543276 Td
(A: In distance vector routing, slow convergence can cause the 'count-to-infinity' problem) Tj
T* (where routers continuously increment hop counts when a link fails. Link state routing) Tj
T* (avoids this by distributing the entire network topology to each router, enabling independent) Tj
T* (shortest path calculation via Dijkstra's algorithm, leading to faster convergence.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 308.9766141732283131 Td
(Card 5/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 269.2915748031495013 Td
(Q: Why is hierarchical routing crucial for large network scalability? Provide an example.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 229.6065354330708033 Td
(A: Hierarchical routing improves scalability by grouping routers into regions, reducing) Tj
T* (routing table size.  Instead of storing entries for every router, routers store information) Tj
T* (about their region and higher-level summaries. For example, 720 routers in 24 regions of) Tj
T* (30 reduces table entries from 720 to ~53 \(30 local + 23 remote\).) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 2087
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 6/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Compare 'distinct packet' broadcasting with multi-destination routing regarding) Tj
T* (bandwidth efficiency.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 685.9844881889763428 Td
(A: Distinct packet broadcasting creates a separate packet for each destination, consuming) Tj
T* (significant bandwidth. Multi-destination routing includes a list of destinations within each) Tj
T* (packet, allowing routers to create copies only when necessary, conserving bandwidth,) Tj
T* (especially when multiple packets share routes.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 527.2443307086614368 Td
(Card 7/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 487.559291338582625 Td
(Q: How does Reverse Path Forwarding \(RPF\) prevent broadcast storms?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 447.8742519685038701 Td
(A: RPF checks if a broadcast packet arrived on the shortest path to the source. If so, it's) Tj
T* (forwarded; otherwise, it's discarded as a likely duplicate. This prevents loops and) Tj
T* (redundant transmissions, mitigating broadcast storms.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 308.9766141732283131 Td
(Card 8/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 269.2915748031495013 Td
(Q: What are the advantages and a key issue with using spanning trees for broadcasting?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 229.6065354330708033 Td
(A: Spanning trees ensure a broadcast packet reaches every router exactly once,) Tj
T* (minimizing packet count and maximizing bandwidth.  However, each router needs) Tj
T* (knowledge of the spanning tree topology, requiring distribution and maintenance of this) Tj
T* (information.) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 1436
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 9/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Compare and contrast dense mode and sparse mode multicast routing.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: Dense mode proactively forwards multicast traffic to all interfaces until pruned. Sparse) Tj
T* (mode only forwards traffic upon downstream request. Dense mode is simpler but less) Tj
T* (efficient in sparsely populated groups, while sparse mode is more efficient but requires) Tj
T* (more complex signaling.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 547.086850393700729 Td
(Card 10/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 507.4018110236219741 Td
(Q: How do core-based trees address the disadvantages of pruning in multicast routing?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 467.716771653543276 Td
(A: Pruning requires routers to store *m* x *n* trees \(for *n* groups with *m* members) Tj
T* (each\). Core-based trees designate a single core router per group, reducing storage to one) Tj
T* (tree per group per router. Members join via the core, simplifying forwarding and drastically) Tj
T* (reducing resource requirements.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 3.0.1)
/CreationDate (D:20250425115420+05'30')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000008694 00000 n 
0000010534 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000002282 00000 n 
0000002419 00000 n 
0000004791 00000 n 
0000004928 00000 n 
0000007067 00000 n 
0000007205 00000 n 
0000008769 00000 n 
0000008895 00000 n 
0000009026 00000 n 
0000009160 00000 n 
0000009298 00000 n 
0000009422 00000 n 
0000009551 00000 n 
0000009683 00000 n 
0000009819 00000 n 
0000009947 00000 n 
0000010074 00000 n 
0000010203 00000 n 
0000010336 00000 n 
0000010438 00000 n 
0000010787 00000 n 
0000010873 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <5635ACB2E2D3D0C8480341D48D3D6E23> <5635ACB2E2D3D0C8480341D48D3D6E23> ]
>>
startxref
10977
%%EOF