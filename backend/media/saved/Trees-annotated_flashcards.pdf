%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 1772
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Flashcards) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 745.5120472440944468 Td
(File: Trees-annotated) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 725.6695275590550409 Td
(Date: 30-07-2025) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 705.8270078740157487 Td
(Total Cards: 10) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
56.6929133858267775 666.1419685039369369 Td
(Card 1/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 626.4569291338582389 Td
(Q: What is the fundamental difference between a computer 'solving' a problem and) Tj
T* ('executing' a solution, as stated by Laurent Gasser?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 566.9293700787401349 Td
(A: Computers don't inherently understand or devise solutions. They merely follow) Tj
T* (pre-programmed instructions \(algorithms\) to execute a solution that has already been) Tj
T* (defined by a human.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 428.0317322834645211 Td
(Card 2/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 388.3466929133857661 Td
(Q: Explain the relationship between 'node', 'parent', and 'children' in the context of a tree) Tj
T* (data structure.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 328.8191338582676053 Td
(A: A 'node' is a basic unit of a tree. A 'parent' node is a node that has one or more nodes) Tj
T* (connected below it. These connected nodes are called 'children' of the parent node. A node) Tj
T* (can be both a parent and a child.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 1849
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 3/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Differentiate between the 'degree of a node' and the 'degree of a tree'.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: The 'degree of a node' is the number of children that node has. The 'degree of a tree' is) Tj
T* (the maximum degree of any node in the tree.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 586.7718897637794271 Td
(Card 4/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 547.086850393700729 Td
(Q: What distinguishes an 'internal node' from an 'external node' \(leaf node\) in a tree?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 507.4018110236219741 Td
(A: An 'internal node' \(or non-terminal node\) has at least one child. An 'external node' \(or) Tj
T* (leaf node\) has no children.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 388.3466929133857661 Td
(Card 5/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 348.6616535433070112 Td
(Q: Describe the key differences between a 'strictly binary tree', a 'complete binary tree',) Tj
T* (and a 'full binary tree'.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 289.1340944881889072 Td
(A: A 'strictly binary tree' has each node with either 0 or 2 children. A 'complete binary tree') Tj
T* (is filled from left to right on each level, with the last level possibly incomplete. A 'full binary) Tj
T* (tree' is a binary tree where every node has either 0 or 2 children, and all leaf nodes are at) Tj
T* (the same level.) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 2193
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 6/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Explain the purpose of an 'expression tree' and how it relates to prefix, infix, and postfix) Tj
T* (notations.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 685.9844881889763428 Td
(A: An 'expression tree' visually represents an arithmetic or logical expression. The) Tj
T* (placement of operators and operands in the tree dictates the order of operations.) Tj
T* (Traversing the tree in different ways \(preorder, inorder, postorder\) yields the prefix, infix,) Tj
T* (and postfix notations of the expression, respectively.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 527.2443307086614368 Td
(Card 7/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 487.559291338582625 Td
(Q: What is the significance of 'height' or 'depth' in the context of a tree, and how does it) Tj
T* (relate to the concept of 'level'?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 428.0317322834645211 Td
(A: The 'height' \(or depth\) of a tree is the maximum level of any node in the tree, starting) Tj
T* (from the root \(usually level 0 or 1\). 'Level' refers to the distance of a node from the root) Tj
T* (node.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 289.1340944881889072 Td
(Card 8/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 249.4490551181102092 Td
(Q: Describe the difference between 'Depth First Search' and 'Breadth First Search' tree) Tj
T* (traversal methods.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 189.9214960629919915 Td
(A: 'Depth First Search' \(DFS\) explores as far as possible along each branch before) Tj
T* (backtracking. Common DFS traversals are Inorder, Preorder, and Postorder. 'Breadth First) Tj
T* (Search' \(BFS\) explores all the neighbor nodes at the present depth prior to moving on to) Tj
T* (the nodes at the next depth level.) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 1373
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 9/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: What is a 'Binary Search Tree' \(BST\), and what property must it satisfy?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: A 'Binary Search Tree' \(BST\) is a binary tree where for each node, the value of all nodes) Tj
T* (in its left subtree are less than the node's value, and the value of all nodes in its right) Tj
T* (subtree are greater than the node's value.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 566.9293700787401349 Td
(Card 10/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 527.2443307086614368 Td
(Q: Explain the concept of a 'Heap' data structure and differentiate between a 'Max Heap') Tj
T* (and a 'Min Heap'.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 467.716771653543276 Td
(A: A 'Heap' is a specialized tree-based data structure that satisfies the heap property: In a) Tj
T* ('Max Heap', the value of each node is greater than or equal to the value of its children. In a) Tj
T* ('Min Heap', the value of each node is less than or equal to the value of its children.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 3.0.1)
/CreationDate (D:20250730192540+05'30')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000007960 00000 n 
0000009800 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000001976 00000 n 
0000002113 00000 n 
0000004014 00000 n 
0000004151 00000 n 
0000006396 00000 n 
0000006534 00000 n 
0000008035 00000 n 
0000008161 00000 n 
0000008292 00000 n 
0000008426 00000 n 
0000008564 00000 n 
0000008688 00000 n 
0000008817 00000 n 
0000008949 00000 n 
0000009085 00000 n 
0000009213 00000 n 
0000009340 00000 n 
0000009469 00000 n 
0000009602 00000 n 
0000009704 00000 n 
0000010053 00000 n 
0000010139 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <E34DEF896521FF5E4E16170B79FB162B> <E34DEF896521FF5E4E16170B79FB162B> ]
>>
startxref
10243
%%EOF