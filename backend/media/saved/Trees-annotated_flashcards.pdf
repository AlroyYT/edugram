%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 1864
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Flashcards) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 745.5120472440944468 Td
(File: Trees-annotated) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 725.6695275590550409 Td
(Date: 25-07-2025) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 705.8270078740157487 Td
(Total Cards: 10) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
56.6929133858267775 666.1419685039369369 Td
(Card 1/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 626.4569291338582389 Td
(Q: What is the fundamental difference between a computer 'solving' a problem and) Tj
T* ('executing' a solution, as stated by Laurent Gasser?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 566.9293700787401349 Td
(A: Computers do not inherently understand or devise solutions. They require a pre-defined,) Tj
T* (step-by-step solution \(an algorithm\) to be provided, which they then execute mechanically.) Tj
T* ('Solving' implies understanding and devising a solution, while 'executing' implies following) Tj
T* (instructions.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 408.1892125984251152 Td
(Card 2/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 368.5041732283464171 Td
(Q: Define a 'tree' data structure in terms of its components and relationships.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 328.8191338582676053 Td
(A: A tree is a hierarchical data structure consisting of nodes connected by edges. It has a) Tj
T* (root node, which has no parent, and subtrees, which are themselves trees. Nodes can) Tj
T* (have children, and nodes with the same parent are siblings.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 2205
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 3/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Explain the difference between the 'height' and 'level' of a node in a tree.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: The 'level' of a node is its distance from the root \(root is at level 0\). The 'height' of a) Tj
T* (node is the length of the longest path from that node to a leaf node. The 'height' of the tree) Tj
T* (is the height of the root node.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 566.9293700787401349 Td
(Card 4/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 527.2443307086614368 Td
(Q: What distinguishes a 'strictly binary tree' from a 'full binary tree'?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 487.559291338582625 Td
(A: A 'strictly binary tree' is a binary tree where every node has either 0 or 2 children. A 'full) Tj
T* (binary tree' is a binary tree where every node, except the leaf nodes, has exactly two) Tj
T* (children, and all leaf nodes are at the same level.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 348.6616535433070112 Td
(Card 5/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 308.9766141732283131 Td
(Q: Describe the three common forms of expression notation \(prefix, infix, postfix\) and how) Tj
T* (they relate to the construction of an expression tree.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 249.4490551181102092 Td
(A: Prefix notation places the operator before its operands \(e.g., + AB\). Infix notation places) Tj
T* (the operator between its operands \(e.g., A + B\). Postfix notation places the operator after) Tj
T* (its operands \(e.g., AB+\). An expression tree can be constructed from any of these) Tj
T* (notations, with the operators as internal nodes and operands as leaf nodes. The order of) Tj
T* (operations is implicitly defined by the tree structure.) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 2323
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 6/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: What is a 'balanced binary tree', and why is balance important?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: A balanced binary tree is a binary tree where the heights of the left and right subtrees of) Tj
T* (every node differ by at most a certain constant \(often 1\). Balance is important because it) Tj
T* (ensures that operations like search, insertion, and deletion have a time complexity of O\(log) Tj
T* (n\), where n is the number of nodes. An unbalanced tree can degenerate into a linked list,) Tj
T* (resulting in O\(n\) complexity.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 527.2443307086614368 Td
(Card 7/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 487.559291338582625 Td
(Q: Explain the difference between 'Depth First Search' \(DFS\) and 'Breadth First Search') Tj
T* (\(BFS\) in the context of binary tree traversal.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 428.0317322834645211 Td
(A: DFS explores as far as possible along each branch before backtracking. Common DFS) Tj
T* (traversals are Inorder, Preorder, and Postorder. BFS explores all the neighbor nodes at the) Tj
T* (present depth prior to moving on to the nodes at the next depth level. It uses a queue data) Tj
T* (structure.) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 269.2915748031495013 Td
(Card 8/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 229.6065354330708033 Td
(Q: What is a 'Binary Search Tree' \(BST\), and what property defines its structure?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 189.9214960629919915 Td
(A: A Binary Search Tree \(BST\) is a binary tree where for each node, the value of all nodes) Tj
T* (in its left subtree are less than the node's value, and the value of all nodes in its right) Tj
T* (subtree are greater than the node's value. This property allows for efficient searching,) Tj
T* (insertion, and deletion operations.) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 1501
>>
stream
0.5670000000000001 w
0 G
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Card 9/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 745.5120472440944468 Td
(Q: Describe the three cases to consider when deleting a node from a Binary Search Tree.) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 705.8270078740157487 Td
(A: Case 1: The node to be deleted is a leaf node. Simply remove the node. Case 2: The) Tj
T* (node to be deleted has only one child. Replace the node with its child. Case 3: The node to) Tj
T* (be deleted has two children. Replace the node with its inorder successor \(or predecessor\)) Tj
T* (and then delete the inorder successor \(or predecessor\).) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0. g
56.6929133858267775 547.086850393700729 Td
(Card 10/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0. 0.545 rg
56.6929133858267775 507.4018110236219741 Td
(Q: What are 'Heaps', and how do 'Max Heaps' and 'Min Heaps' differ?) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0. 0.392 0. rg
56.6929133858267775 467.716771653543276 Td
(A: A Heap is a specialized tree-based data structure that satisfies the heap property. In a) Tj
T* ('Max Heap', the value of each node is greater than or equal to the value of its children. In a) Tj
T* ('Min Heap', the value of each node is less than or equal to the value of its children. Heaps) Tj
T* (are often implemented as complete binary trees.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 3.0.1)
/CreationDate (D:20250725145556+05'30')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000008666 00000 n 
0000010506 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000002068 00000 n 
0000002205 00000 n 
0000004462 00000 n 
0000004599 00000 n 
0000006974 00000 n 
0000007112 00000 n 
0000008741 00000 n 
0000008867 00000 n 
0000008998 00000 n 
0000009132 00000 n 
0000009270 00000 n 
0000009394 00000 n 
0000009523 00000 n 
0000009655 00000 n 
0000009791 00000 n 
0000009919 00000 n 
0000010046 00000 n 
0000010175 00000 n 
0000010308 00000 n 
0000010410 00000 n 
0000010759 00000 n 
0000010845 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <3896FBE15364AFDA09F5A90C47BE09FE> <3896FBE15364AFDA09F5A90C47BE09FE> ]
>>
startxref
10949
%%EOF