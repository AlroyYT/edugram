%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 2183
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
56.6929133858267775 785.1970866141732586 Td
(Quiz Results) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 745.5120472440944468 Td
(File: DAA UNIT 2) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 725.6695275590550409 Td
(Date: 31-07-2025) Tj
ET
BT
/F1 14 Tf
16.0999999999999979 TL
0 g
56.6929133858267775 685.9844881889763428 Td
(Score: 2/10) Tj
ET
BT
/F1 12 Tf
13.7999999999999989 TL
0 g
56.6929133858267775 646.2994488188976447 Td
(Question 1: Which algorithm design technique is described as dividing a problem into) Tj
T* (subproblems?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0 g
85.0393700787401627 586.7718897637794271 Td
(A. Dynamic Programming) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 566.9293700787401349 Td
(B. Greedy Algorithm) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 547.086850393700729 Td
(C. Divide and Conquer) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 527.2443307086614368 Td
(D. Backtracking) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 487.559291338582625 Td
(Explanation: Divide and Conquer is a technique that involves dividing a problem into smaller subproblems,) Tj
T* (solving them, and then combining the solutions.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 388.3466929133857661 Td
(Question 2: What is the first step in the general plan for Divide and Conquer?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 348.6616535433070112 Td
(A. Solve the subproblems using a different algorithm) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 328.8191338582676053 Td
(B. Combine the solutions to the subproblems) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 308.9766141732283131 Td
(C. Divide a problem into subproblems of the same type and ideally of equal size) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 289.1340944881889072 Td
(D. Employ a greedy algorithm) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 249.4490551181102092 Td
(Explanation: The first step in Divide and Conquer is to break down the original problem into smaller, similar) Tj
T* (subproblems.) Tj
ET
endstream
endobj
5 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 6 0 R
>>
endobj
6 0 obj
<<
/Length 2512
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Question 3: Which sorting algorithm is given as an example of Divide and Conquer?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 745.5120472440944468 Td
(A. Bubble Sort) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 725.6695275590550409 Td
(B. Insertion Sort) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 705.8270078740157487 Td
(C. Merge Sort) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 685.9844881889763428 Td
(D. Selection Sort) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 646.2994488188976447 Td
(Explanation: Merge Sort is a classic example of the Divide and Conquer technique, dividing the array, sorting) Tj
T* (subarrays, and merging them.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 547.086850393700729 Td
(Question 4: In Merge Sort, what is done after dividing the array into two halves?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 507.4018110236219741 Td
(A. The two halves are merged directly) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 487.559291338582625 Td
(B. Each half is sorted using a different sorting algorithm) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 467.716771653543276 Td
(C. Each half is sorted recursively) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 447.8742519685038701 Td
(D. The smaller elements are moved to the left side) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 408.1892125984251152 Td
(Explanation: After dividing the array, Merge Sort recursively sorts each half until the base case is reached.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 328.8191338582676053 Td
(Question 5: What is done in the 'Merge' step of Merge Sort?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 289.1340944881889072 Td
(A. The two subarrays are divided further) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 269.2915748031495013 Td
(B. The two sorted subarrays are combined into a single sorted array) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 249.4490551181102092 Td
(C. The elements in the subarrays are swapped) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 229.6065354330708033 Td
(D. The largest element is moved to the end) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 189.9214960629919915 Td
(Explanation: The Merge step takes two sorted subarrays and combines them into a single sorted array by) Tj
T* (comparing elements.) Tj
ET
endstream
endobj
7 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 8 0 R
>>
endobj
8 0 obj
<<
/Length 2261
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Question 6: In the worst-case scenario, how many key comparisons, Cmerge\(n\), are performed during the) Tj
T* (merging stage of Merge Sort?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 725.6695275590550409 Td
(A. n/2) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 705.8270078740157487 Td
(B. n) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 685.9844881889763428 Td
(C. n - 1) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 666.1419685039369369 Td
(D. log n) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 626.4569291338582389 Td
(Explanation: In the worst case for merging, Cmerge\(n\) = n - 1 comparisons are made. This happens when) Tj
T* (the elements are interleaved between the two arrays.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 527.2443307086614368 Td
(Question 7: What is the time complexity of Merge Sort?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 487.559291338582625 Td
(A. O\(n\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 467.716771653543276 Td
(B. O\(n^2\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 447.8742519685038701 Td
(C. O\(log n\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 428.0317322834645211 Td
(D. O\(n log n\)) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 388.3466929133857661 Td
(Explanation: The time complexity of Merge Sort is O\(n log n\), making it an efficient sorting algorithm.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 308.9766141732283131 Td
(Question 8: Quick Sort works based on what technique?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 269.2915748031495013 Td
(A. Dynamic Programming) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 249.4490551181102092 Td
(B. Greedy Algorithm) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 229.6065354330708033 Td
(C. Divide and Conquer) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 209.7640157480313974 Td
(D. Brute Force) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 170.0789763779526993 Td
(Explanation: Quick Sort uses the Divide and Conquer technique to sort an array by partitioning it around a) Tj
T* (pivot.) Tj
ET
endstream
endobj
9 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 10 0 R
>>
endobj
10 0 obj
<<
/Length 1739
>>
stream
0.5670000000000001 w
0 G
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 785.1970866141732586 Td
(Question 9: In Quick Sort, what is the role of the 'Partition' function?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 745.5120472440944468 Td
(A. To sort the entire array) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 725.6695275590550409 Td
(B. To select the largest element) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 705.8270078740157487 Td
(C. To create a partition around the correct position of a pivot) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 685.9844881889763428 Td
(D. To merge two subarrays) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 646.2994488188976447 Td
(Explanation: The Partition function in Quick Sort places the pivot element in its correct sorted position and) Tj
T* (divides the array into two subarrays.) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 547.086850393700729 Td
(Question 10: What is selected first when implementing the Quick Sort algorithm?) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 507.4018110236219741 Td
(A. Middle Element) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
85.0393700787401627 487.559291338582625 Td
(B. Smallest element) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. 0.502 0. rg
85.0393700787401627 467.716771653543276 Td
(C. Pivot point) Tj
ET
BT
/F1 10 Tf
11.5 TL
1. 0. 0. rg
85.0393700787401627 447.8742519685038701 Td
(D. Largest element) Tj
ET
BT
/F1 10 Tf
11.5 TL
0. g
56.6929133858267775 408.1892125984251152 Td
(Explanation: Quick Sort works by selecting a pivot point and partitioning the array around it, such that) Tj
T* (elements smaller than the pivot are placed before it and elements greater than the pivot are placed after it.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R 5 0 R 7 0 R 9 0 R ]
/Count 4
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
19 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
20 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
21 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
22 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
23 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
24 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 11 0 R
/F2 12 0 R
/F3 13 0 R
/F4 14 0 R
/F5 15 0 R
/F6 16 0 R
/F7 17 0 R
/F8 18 0 R
/F9 19 0 R
/F10 20 0 R
/F11 21 0 R
/F12 22 0 R
/F13 23 0 R
/F14 24 0 R
>>
/XObject <<
>>
>>
endobj
25 0 obj
<<
/Producer (jsPDF 3.0.1)
/CreationDate (D:20250731230340+05'30')
>>
endobj
26 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 27
0000000000 65535 f 
0000009468 00000 n 
0000011308 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000002387 00000 n 
0000002524 00000 n 
0000005088 00000 n 
0000005225 00000 n 
0000007538 00000 n 
0000007676 00000 n 
0000009543 00000 n 
0000009669 00000 n 
0000009800 00000 n 
0000009934 00000 n 
0000010072 00000 n 
0000010196 00000 n 
0000010325 00000 n 
0000010457 00000 n 
0000010593 00000 n 
0000010721 00000 n 
0000010848 00000 n 
0000010977 00000 n 
0000011110 00000 n 
0000011212 00000 n 
0000011561 00000 n 
0000011647 00000 n 
trailer
<<
/Size 27
/Root 26 0 R
/Info 25 0 R
/ID [ <C2814BFC8AC8D562653AF44BA21F8713> <C2814BFC8AC8D562653AF44BA21F8713> ]
>>
startxref
11751
%%EOF